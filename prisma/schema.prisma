generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique @db.VarChar(255)
  password              String                  @db.VarChar(255)
  first_name            String?
  last_name             String?
  user_name             String?                 @unique @db.VarChar(255)
  unique_code           String?                 @unique @db.VarChar(255)
  phone                 String?                 @db.VarChar(180)
  photo                 String?                 @db.VarChar(500)
  country               String?                 @db.VarChar(180)
  birth_date            DateTime?
  role                  Int                     @default(2) @db.SmallInt
  status                Int                     @default(0) @db.SmallInt
  is_subscribed         Int                     @default(0) @db.SmallInt
  email_verified        Int                     @default(0) @db.SmallInt
  phone_verified        Int                     @default(0) @db.SmallInt
  gender                Int                     @default(1) @db.SmallInt
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  login_provider        String                  @db.VarChar(50)
  LinkedInProfiles      LinkedInProfile[]
  LinkedInPosts         LinkedInPost[]
  Carousels             Carousel[]
  UserTokens            UserTokens[]
  UserVerificationCodes UserVerificationCodes[]
  Subscription          Subscription?
  UserBranding          UserBranding?
  Files                 File[]
  Workspaces            Workspace[]

  @@index([id])
}

model Workspace {
  id              String         @id @default(cuid())
  name            String
  description     String?
  isDefault       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  personalAiVoice String?        @db.Text
  user            User           @relation(fields: [userId], references: [id])
  linkedInPosts   LinkedInPost[]
  carousels       Carousel[]

  @@index([userId])
}

model LinkedInProfile {
  id                 String         @id @default(cuid())
  userId             String
  profileId          String         @unique
  accessToken        String         @db.Text
  name               String?
  email              String?
  avatarUrl          String?        @db.Text
  clientId           String
  creatorId          String
  linkedInProfileUrl String?        @db.Text
  tokenExpiringAt    DateTime
  isDefault          Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  user               User           @relation(fields: [userId], references: [id])
  LinkedInPost       LinkedInPost[]

  @@index([userId])
}

model LinkedInPost {
  id                  String           @id @default(cuid())
  content             String           @db.Text
  visibility          String           @default("public")
  postType            String           @default("text")
  imageUrls           String[]         @default([])
  videoUrl            String?
  documentUrl         String?
  hashtags            String[]         @default([])
  scheduledTime       DateTime?
  status              Int              @default(0) // 0: draft, 1: scheduled, 2: posted
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  publishedAt         DateTime?
  publishedId         String?
  linkedInApiResponse Json?
  mentions            String[]         @default([])
  fileUrl             String?
  publishingError     String?
  carouselTitle       String?
  videoTitle          String?
  publishingErrorCode String?
  userId              String
  workspaceId         String
  linkedInProfileId   String?
  linkedInProfile     LinkedInProfile? @relation(fields: [linkedInProfileId], references: [id])
  user                User             @relation(fields: [userId], references: [id])
  workspace           Workspace        @relation(fields: [workspaceId], references: [id])
  postLogs            PostLog[]

  @@index([userId])
  @@index([workspaceId])
  @@index([linkedInProfileId])
}

model PostLog {
  id             String       @id @default(cuid())
  linkedInPostId String
  status         String
  message        String?
  timestamp      DateTime     @default(now())
  linkedInPost   LinkedInPost @relation(fields: [linkedInPostId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([linkedInPostId])
}

model UserTokens {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @db.Text
  family       String   @db.VarChar(255)
  browserInfo  String?  @db.VarChar(255)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([refreshToken])
}

model Package {
  id String @id @default(cuid())

  // Basic Package Info
  name        String // e.g., "Pro Plan", "Business Plan"
  description String
  type        String // "monthly" | "yearly" | "lifetime"
  status      String @default("active") // "active" | "inactive" | "deprecated"

  // Pricing
  price    Float
  currency String @default("USD")

  // Lemon Squeezy Integration
  variantId String @unique // Lemon Squeezy variant ID
  productId String // Lemon Squeezy product ID

  // Word Generation Limits
  monthlyWordLimit Int // Monthly word generation limit

  // LinkedIn Limits
  linkedInAccountLimit Int @default(1) // Number of LinkedIn accounts allowed
  linkedInPostLimit    Int @default(30) // Monthly LinkedIn posts allowed
  linkedInImageLimit   Int @default(4) // Images per post
  linkedInVideoLimit   Int @default(1) // Videos per post

  // Carousel Limits
  carouselLimit      Int @default(10) // Monthly carousel generations
  carouselSlideLimit Int @default(8) // Slides per carousel

  // AI Features
  hasHashtagSuggestions Boolean @default(false)
  aiWriting             Boolean @default(false)
  hasScheduling         Boolean @default(false)

  // Future Features (JSON for very new or experimental features)
  additionalFeatures Json? // For beta/new features before making them columns

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@index([status])
  @@index([type])
}

model Subscription {
  id String @id @default(cuid())

  // User Relationship
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Package Relationship
  packageId String? // null for custom/trial subscriptions
  package   Package? @relation(fields: [packageId], references: [id])

  // Subscription Status
  status  String  @default("active") // "active" | "cancelled" | "expired" | "trial"
  orderId String? @unique // Lemon Squeezy order ID

  // Trial Information
  isTrial   Boolean @default(false)
  trialUsed Boolean @default(false)

  // Subscription Dates
  startDate   DateTime  @default(now())
  endDate     DateTime
  cancelledAt DateTime?

  // Word Usage Tracking
  monthlyWordLimit    Int      @default(0) // Current period word limit
  wordsGenerated      Int      @default(0) // Words used in current period
  wordsAllowedInTrial Int? // Only for trial subscriptions
  lastWordResetDate   DateTime @default(now())
  nextWordResetDate   DateTime // For monthly reset planning

  // LinkedIn Usage Tracking
  linkedInAccountLimit Int      @default(1)
  linkedInAccountsUsed Int      @default(0)
  linkedInPostLimit    Int      @default(30)
  linkedInPostsUsed    Int      @default(0)
  lastPostResetDate    DateTime @default(now())
  nextPostResetDate    DateTime

  // Carousel Usage Tracking
  carouselLimit         Int      @default(10)
  carouselsGenerated    Int      @default(0)
  lastCarouselResetDate DateTime @default(now())
  nextCarouselResetDate DateTime

  // Feature Access (inherited from package but can be overridden)
  aiWriting     Boolean @default(false)
  hasScheduling Boolean @default(false)

  // Billing Information
  billingCycle String? // "monthly" | "yearly" | "lifetime"
  renewalPrice Float? // Price for next renewal
  currency     String  @default("USD")

  // Custom Overrides
  customFeatures Json? // For special cases or temporary feature grants

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  wordTokenLogs WordTokenLog[]

  // Indexes
  @@index([userId])
  @@index([packageId])
  @@index([status])
  @@index([endDate])
  @@index([isTrial])
}

model WordTokenLog {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Int
  type           String // "PURCHASE" | "USAGE" | "RESET" | "EXPIRY"
  source         String // "subscription" | "trial" | "bonus" | "admin"
  description    String?
  metadata       Json?
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
  @@index([type])
  @@index([createdAt])
}

model Carousel {
  id          String    @id @default(cuid())
  userId      String
  data        Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

model UserBranding {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  handle    String
  headshot  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model File {
  id           String   @id @default(cuid())
  userId       String
  name         String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String?
  isPublic     Boolean  @default(false)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserVerificationCodes {
  id         String   @id @default(cuid())
  userId     String
  code       String   @unique @db.VarChar(10)
  status     Int      @default(0) @db.SmallInt
  type       Int      @default(1) @db.SmallInt
  expired_at DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
